# Maintainer: Nicola Squartini <tensor5@gmail.com>

_chromiumver=47.0.2526.110
_rebuildcc=1  # 0: don't rebuild libchromiumcontent
pkgname=electron
pkgver=0.36.7
pkgrel=2
pkgdesc='Build cross platform desktop apps with web technologies'
arch=('i686' 'x86_64')
url='http://electron.atom.io/'
license=('MIT' 'custom')
depends=('ffmpeg' 'gconf' 'gtk2' 'icu' 'libevent' 'libnotify' 'libvpx' 'libxslt'
         'minizip' 'nss' 're2' 'snappy')
makedepends=('clang' 'git' 'harfbuzz-icu' 'jsoncpp' 'libexif' 'ninja' 'npm'
             'python2' 'yasm')
source=("git+https://github.com/atom/electron.git#tag=v${pkgver}"
        'git+https://github.com/boto/boto.git'
        'git+https://github.com/atom/brightray.git'
        'breakpad::git+https://github.com/atom/chromium-breakpad.git'
        'git+https://github.com/atom/crashpad.git'
        'git+https://github.com/svn2github/gyp.git'
        "git+https://github.com/atom/libchromiumcontent.git"
        'native_mate::git+https://github.com/zcbenz/native-mate.git'
        'git+https://github.com/atom/node.git'
        'git+https://github.com/kennethreitz/requests.git'
        'google-breakpad::git+https://chromium.googlesource.com/external/google-breakpad/src.git'
        "https://github.com/zcbenz/chromium-source-tarball/releases/download/${_chromiumver}/chromium-${_chromiumver}.tar.xz"
        'use-system-clang.patch'
        'use-system-ninja.patch'
        'use-system-icu.patch'
        'libchromiumcontent-dont-create-zip.patch'
        'libchromiumcontent-use-system-tools.patch'
        'unbundle-libvpx_new-fix.patch'
        'https://codereview.chromium.org/download/issue1414393011_1.diff'
        'https://raw.githubusercontent.com/gentoo/gentoo/master/www-client/chromium/files/chromium-system-ffmpeg-r0.patch')
noextract=("chromium-${_chromiumver}.tar.xz")
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'dd0814ead32a3a27eafa635721d007a280bb2d042728831c8be3ab20442b699f'
            '4377d253749cd2e851870ec499e90a013ce4c5c4833009e785e8e77423bf2b26'
            '6566b7b35fd4adccbf48b1a024a6da6d8b2349149be0eb2374df2e3ee3a777af'
            '32c33764c179ccbc766b87fd0a0b2e1936fc4a88a7a727270e61cf3a19f1ac6d'
            '14d18da908aeb78b1dd39b707e7e34ec34a4a23f29f3acbc4b57288e35ec1d06'
            '0ff3e3061baa0d0df5833da26216fe9ff7b5081d2671b094fe292fc7e85eb995'
            '6a2fd2d8ce5363a67452f6531a6b83f1e535f800286119fd9910d3b31c76c3bc'
            'c7dd15464752d31ff63bf4513ea0eef3bcd088e33a10789dd211a058e0dfae1b'
            '32f65bb6d1a70eea8c0536e7d9aebf8f09cb161d2dd0cda8ace52ae0e417761d')

prepare() {
  cd ${srcdir}/electron

  patch -Np1 -i ${srcdir}/use-system-clang.patch
  patch -Np1 -i ${srcdir}/use-system-ninja.patch
  patch -Np1 -i ${srcdir}/use-system-icu.patch

  mkdir -p ${srcdir}/python2-path
  ln -sf /usr/bin/python2 "${srcdir}/python2-path/python"

  sed -e "s/  update_submodules/  # update_submodules/" -i script/bootstrap.py

  for m in boto breakpad brightray crashpad native_mate node requests; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url ${srcdir}/${m}
  done
  git submodule update

  cd ${srcdir}/electron/vendor/breakpad
  git submodule init src
  git config submodule.src.url ${srcdir}/google-breakpad
  git submodule update

  cd ${srcdir}/electron/vendor/brightray
  sed -e "s/  update_submodules()/  # update_submodules()/" -i script/bootstrap
  for m in libchromiumcontent gyp; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url ${srcdir}/${m}
  done
  git submodule update
  # Remove unused shared library and add extra libraries for unbundling
  sed -e "/-lcups/d" \
      -e "s/'-lexpat',/'-lexpat', '<\!@(pkg-config --libs-only-l libavcodec libavformat libavutil libevent flac harfbuzz-icu icu-i18n jsoncpp minizip libpng vpx libwebpdemux libxml-2.0 libxslt)', '-ljpeg', '-lre2', '-lsnappy',/" \
      -i brightray.gyp

  if [ ${_rebuildcc} -ne 0 ]; then
    cd ${srcdir}/libchromiumcontent
    _cc_commit=$(grep LIBCHROMIUMCONTENT_COMMIT ../electron/script/lib/config.py | awk 'BEGIN { FS = "=" } ; { print $2 }')
    git checkout ${_cc_commit:2:40}
    git submodule update --init vendor/python-patch
    patch -Np1 -i "${srcdir}"/libchromiumcontent-use-system-tools.patch
    patch -Np1 -i "${srcdir}"/libchromiumcontent-dont-create-zip.patch
    rm patches/third_party/ffmpeg/ffmpeg.patch  # Use system ffmpeg
    sed -e "/icudtl.dat/d" -i script/create-dist  # Use system icu
    _chromium_flags=('clang=1'
                     'clang_use_chrome_plugins=0'
                     'disable_fatal_linker_warnings=1'  # Use system ffmpeg
                     'fastbuild=2'
                     'host_clang=0'
                     'icu_use_data_file_flag=0'
                     'release_extra_cflags="-O3"'
                     'remove_webcore_debug_symbols=1'
                     'use_system_expat=1'
                     'use_system_ffmpeg=1'
                     'use_system_flac=1'
                     'use_system_harfbuzz=1'
                     'use_system_icu=1'
                     'use_system_jsoncpp=1'
                     'use_system_libevent=1'
                     'use_system_libjpeg=1'
                     'use_system_libpng=1'
                     'use_system_libvpx=1'
                     'use_system_libwebp=1'
                     'use_system_libxml=1'
                     'use_system_libxslt=1'
                     'use_system_re2=1'
                     'use_system_snappy=1'
                     'use_system_yasm=1'
                     'use_system_zlib=1'
                    )
    cd ${srcdir}/libchromiumcontent/vendor/chromium
    echo "{" > chromium.gyp_env
    echo "  'CC': 'clang -Qunused-arguments'," >> chromium.gyp_env
    echo "  'CXX': 'clang++ -Qunused-arguments'," >> chromium.gyp_env
    echo "  'GYP_DEFINES': '${_chromium_flags[*]}'" >> chromium.gyp_env
    echo "}" >> chromium.gyp_env
    echo 'Extracting chromium source...'
    tar -xJf "${srcdir}"/chromium-${_chromiumver}.tar.xz
    mv chromium-${_chromiumver} src
    if [ ! -e src/.version ]; then
      echo "${_chromiumver}" > src/.version
    fi
    sed -e "/Wno-bitfield-width/d" -e "/detect-odr-violations/d" \
        -i src/build/common.gypi
    cd src
    patch -Np1 -i ${srcdir}/chromium-system-ffmpeg-r0.patch  # Use system ffmpeg
    find third_party/icu -type f \! -regex '.*\.\(gyp\|gypi\|isolate\)' -delete  # Use system icu
    patch -Np1 -i ${srcdir}/unbundle-libvpx_new-fix.patch  # Use system libvpx
    patch -Np1 -i ${srcdir}/issue1414393011_1.diff  # Use system zlib
    build/linux/unbundle/replace_gyp_files.py "${_chromium_flags[@]/#/-D}"
  fi
}

build() {
  export PATH="${srcdir}/python2-path:${PATH}"

  if [ "${CARCH}" == 'x86_64' ]; then
    _target=x64
  else
    _target=ia32
  fi

  if [ ${_rebuildcc} -ne 0 ]; then
    echo 'Building libchromiumcontent...'
    cd ${srcdir}/libchromiumcontent
    export -n CFLAGS CXXFLAGS
    script/update --target_arch=${_target}
    script/build --target_arch=${_target} --component=static_library
    script/create-dist --target_arch=${_target} --component=static_library
    # Necessary for electron build scripts
    mkdir dist/main/shared_library
    echo 'Stripping static libraries (saves space and linking time)...'
    find dist/main/static_library -name *.a -exec strip --strip-debug '{}' \;
  fi

  echo 'Building electron...'
  cd ${srcdir}/electron
  _cc=${srcdir}/libchromiumcontent/dist/main
  LDFLAGS="${LDFLAGS} -Wl,-z,noexecstack"
  script/bootstrap.py --target_arch=${_target} \
                      --libcc_source_path=${_cc}/src \
                      --libcc_shared_library_path=${_cc}/shared_library \
                      --libcc_static_library_path=${_cc}/static_library
  script/build.py -c Release
}

package() {
  cd ${srcdir}/electron

  _cc=${srcdir}/libchromiumcontent/dist/main

  install -d -m755 ${pkgdir}/usr/share/licenses/electron
  install -m644 LICENSE "${_cc}"/LICENSES.chromium.html \
          ${pkgdir}/usr/share/licenses/electron

  cd out/R
  install -d -m755 ${pkgdir}/usr/lib/electron
  install -m644 content_shell.pak natives_blob.bin snapshot_blob.bin \
          ${pkgdir}/usr/lib/electron
  install -m755 electron ${pkgdir}/usr/lib/electron
  # namcap warning: Referenced library 'libnode.so' is an uninstalled dependency
  # Fixable by moving libnode.so to /usr/lib
  install -m644 libnode.so ${pkgdir}/usr/lib/electron
  cp -r locales resources ${pkgdir}/usr/lib/electron

  echo -n "v${pkgver}" > ${pkgdir}/usr/lib/electron/version

  # Install Node headers
  _headers_dest="${pkgdir}/usr/lib/electron/node"
  install -d -m755 "${_headers_dest}"
  cd "${srcdir}"/electron/vendor/node
  find src deps/http_parser deps/zlib deps/uv deps/npm \
    -name "*.gypi" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \; \
    -or -name "*.h" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \;
  install -m644 {common,config}.gypi "${_headers_dest}"
  cd "${srcdir}"/libchromiumcontent/dist/main/src
  find v8 -name "*.h" \
    -exec install -D -m644 '{}' "${_headers_dest}/deps/{}" \;
  # echo '9' > "${_headers_dest}/installVersion"
}
